#!/bin/bash
# 🧱 SnapDoctor Full Installer

echo "🔧 Setting up SnapDoctor project..."

# === Directories ===
PROJECT_DIR=~/Desktop/projects/snapdoctor
ENV_DIR=~/Desktop/snapdoctor-env

mkdir -p "$PROJECT_DIR"
python3 -m venv "$ENV_DIR"

# === Activate and install deps ===
source "$ENV_DIR/bin/activate"
python3 -m ensurepip --upgrade
pip install ruamel.yaml yamllint

# === Scaffold Python files ===
cd "$PROJECT_DIR"

# snapdoctor.py
cat <<EOF > snapdoctor.py
import argparse
from pathlib import Path
from generate_yaml import generate_manifest
from lint_manifest import lint_manifest
from validate_manifest import validate_manifest
from remediate_manifest import remediate_manifest
from suggest_fixes import suggest_fixes
from workflow_run import run_all

def main():
    parser = argparse.ArgumentParser(description="🧠 SnapDoctor CLI")
    subparsers = parser.add_subparsers(dest="command", required=True)

    gen = subparsers.add_parser("generate", help="Create snapcraft.yaml")
    gen.add_argument("--config", type=Path)
    gen.add_argument("--interactive", action="store_true")

    subparsers.add_parser("lint", help="Run yamllint")

    val = subparsers.add_parser("validate", help="Validate manifest")
    val.add_argument("--schema", action="store_true")
    val.add_argument("--plugins", action="store_true")
    val.add_argument("--packages", action="store_true")

    rem = subparsers.add_parser("remediate", help="Fix YAML issues")
    rem.add_argument("--inject-license", action="store_true")
    rem.add_argument("--wrap-lines", action="store_true")

    subparsers.add_parser("suggest", help="Propose patch sets")

    run = subparsers.add_parser("runall", help="Run full diagnostic workflow")
    run.add_argument("--config", type=Path)
    run.add_argument("--interactive", action="store_true")

    args = parser.parse_args()
    if args.command == "generate":
        generate_manifest(config_path=args.config) if not args.interactive else generate_manifest()
    elif args.command == "lint":
        lint_manifest()
    elif args.command == "validate":
        output = validate_manifest(schema=args.schema, plugins=args.plugins, packages=args.packages)
        for issue in output.get("issues", []):
            print(f"🔎 {issue['id']}: {issue['value']}")
    elif args.command == "remediate":
        fixes = remediate_manifest(auto_license=args.inject_license, wrap_lines=args.wrap_lines)
        for fix in fixes:
            print(f"🔧 {fix['id']}: {fix['value']}")
    elif args.command == "suggest":
        suggestions = suggest_fixes(schema=True, plugins=True, packages=True)
        for patch in suggestions:
            print(f"🛠️ {patch['patch']} → {patch['description']} [{patch['status']}]")
    elif args.command == "runall":
        run_all(config_path=args.config, interactive=args.interactive)

if __name__ == "__main__":
    main()
EOF

# Repeat similar for each module, e.g. generate_yaml.py
cat <<EOF > generate_yaml.py
from ruamel.yaml import YAML
from pathlib import Path

def generate_manifest(config_path=None):
    yaml = YAML()
    yaml.preserve_quotes = True
    snap = {
        "name": "snapdoctor-sample",
        "version": "1.0.0",
        "summary": "Sample manifest generated by SnapDoctor",
        "description": "This is a placeholder manifest.",
        "grade": "devel",
        "confinement": "strict",
        "base": "core22",
        "parts": {
            "snap": {
                "plugin": "nil",
                "source": ".",
                "build-packages": [],
                "stage-packages": []
            }
        }
    }
    with open("snapcraft.yaml", "w") as f:
        yaml.dump(snap, f)
    print(f"✅ snapcraft.yaml generated at {Path('snapcraft.yaml').resolve()}")
EOF

# Minimal placeholders for other modules
for name in lint_manifest.py validate_manifest.py remediate_manifest.py suggest_fixes.py patch_apply.py workflow_run.py; do
  echo "def $(basename $name .py)(): pass" > "$name"
done

echo "✅ Setup complete. Use ./run.sh to launch SnapDoctor."
